<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[CSSOM视图模式介绍]]></title>
      <url>%2F2017%2F01%2F21%2Fjs-cssom-view-module%2F</url>
      <content type="text"><![CDATA[Window视图属性这些属性可以获取住整个浏览器窗体大小。 innerWidth 属性和 innerHeight 属性 pageXOffset 属性和 pageYOffset 属性 screenX 属性和 screenY 属性 outerWidth 属性和 outerHeight 属性 innerWidth属性和innerHeight属性innerWidth表示获取window窗体的内部宽度，不包括用户界面元素,浏览器窗口的尺寸（浏览器的视口，不包括工具栏和滚动条）。示例代码：12window.innerWidthwindow.innerHeight 兼容性：不支持IE6/7/8，innerWidth和innerHeight属性只读，没有默认值。 outerWidth属性和outerHeight属性outerWidth/outerHeight表示整个浏览器窗体的大小，包括所有界面元素（如工具栏/滚动条）。 示例代码：12window.outerWidthwindow.outerHeight 兼容性：不支持IE6/7/8，outerWidth和outerHeight属性只读，没有默认值。 区别如图： pageXOffset属性和pageYOffset属性pageXOffset和pageYOffset，表示整个页面滚动的像素值（水平方向的和垂直方向的）。 示例代码：12window.pageXOffsetwindow.pageYOffset 兼容性：不支持IE6/7/8，pageXOffset和pageYOffset属性只读，没有默认值。 screenX属性和screenY属性浏览器窗口在显示器中的位置，screenX表示水平位置，screenY表示垂直位置。 示例代码：12window.screenXwindow.screenY 兼容性：不支持IE6/7/8，IE低版本浏览器使用window.screenLeft 和 window.screenTop可获得相同的值。 Screen视图属性指能获取显示器信息的一些属性。 availWidth 属性和 availHeight 属性 colorDepth 属性 pixelDepth 属性 width 属性和 height 属性 availWidth属性和availHeight属性显示器可用宽高，不包括任务栏之类的。 示例代码：12screen.avialWidthscreen.avialHeight 兼容性良好。 colorDepth属性表示显示器的颜色深度。 示例代码：1screen.colorDepth 兼容性：主浏览器都支持返回24，IE6/7/8返回32。 pixelDepth该属性基本上与colorDepth一样。低版本IE不支持。 width和height表示显示器屏幕的宽高。 示例代码：12screen.widthscreen.height 兼容性良好。 文档视图(DocumentView)和元素视图(ElementView)方法四个方法：1234elementFromPoint()getBoundingClientRect()getClientRects()scrollIntoView() elementFromPoint()方法返回给定坐标处所在的元素。 示例代码：1document.elementFromPoint(x,y) 兼容性：不过位置坐标不太一样，浏览器还是有差异的。 getBoundingClientRect()方法得到矩形元素的界线，返回的是一个对象，包含top,left,right,和bottom四个属性值，大小都是相对于文档视图左上角计算而来。 示例代码：1element.getBoudingClientRect() 兼容性良好。 getClientRects()方法返回元素的数个矩形区域，返回的结果是个对象列表，具有数组特性。这里的矩形选区只针对inline box，因此，只针对a,span,em这类标签元素，这个下面会详细讲述。 兼容性：IE6/7有bug，其他支持。 scrollIntoView()方法让元素滚动到可视区域（不属于草案方法），类似锚点跳转功能页面定位。 示例代码：1element.scrollIntoView() 兼容性良好。 元素视图属性(Element)关于元素大小位置等信息的一些属性。有：clientLeft和clientTopclientWidth和clientHeightoffsetLeft和offsetTopoffsetParentoffsetWidth和offsetHeightscrollLeft和scrollTopscrollWidth和scrollHeight clientLeft属性和clientTop属性表示内容区域的左上角相对于整个元素左上角的位置（包括边框）。 示例代码：12obj.clientLeftobj.clientTop 兼容性良好。 clientWidth属性和clientHeight属性表示内容区域的高度和宽度，包括padding大小，但是不包括边框和滚动条。 示例代码：12obj.clientWidthobj.clientHeight 兼容性良好。 offsetLeft属性和offsetTop属性表示相对于最近的祖先定位元素（CSS position 属性被设置为relative、absolute或fixed的元素）的左右偏移值。 12obj.offsetLeftobj.offsetTop 兼容性良好。 offsetParent属性第一个祖定位元素（即用来计算上面的offsetLeft和offsetTop的元素）。offsetParent元素只可能是下面这几种情况： &lt;body&gt; position不是static的元素 &lt;table&gt;,&lt;th&gt;或&lt;td&gt;，但必须要position: static。 1obj.offsetParent 兼容性良好。 offsetWidth属性和offsetHeight属性整个元素的尺寸（包括边框）。 示例代码：12obj.offsetWidthobj.offsetHeight 兼容性良好。 scrollLeft属性和scrollTop属性表示元素滚动的像素大小。 示例代码：12obj.scrollLeftobj.scrollTop 兼容性良好。 例子：元素位置(绝对)12obj.getBoundingClientRect().left + Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);obj.getBoundingClientRect().top + Math.max(document.documentElement.scrollTop, document.body.scrollTop); scrollWidth属性和scrollHeight属性表示整个内容区域的宽高，包括隐藏的部分。如果元素没有隐藏的部分，则相关的值应该等用于clientWidth和clientHeight。当你向下滚动滚动条的时候，scrollHeight应该等用于scrollTop + clientHeight。 兼容性：不理想。 鼠标位置(Mouse position)相关的些属性有：clientX,clientYoffsetX,offsetYpageX,pageYscreenX,screenYx,y clientX和clientY相对于window，为鼠标相对于window的偏移,不包括滚动条。 示例代码：12event.clientXevent.clientY 兼容性良好。 offsetX和offsetY表示鼠标相对于当前被点击元素padding box的左上偏移值。 示例代码：12event.offsetXevent.offsetY 兼容性：不理想。 pageX和pageY为鼠标相对于document的坐标。包括滚动条的偏移。 示例代码：12event.pageXevent.pageY 兼容性：IE6/7/8不支持。 screenX和screenY鼠标相对于显示器屏幕的偏移坐标。 示例代码：12event.screenXevent.screenY 兼容性良好。 结语上面陆续出现的属性或方法，那些兼容性不错的东西我们可以多多关注下。很多特性都是非常实用的。例如：1234567getBoundingClientRect()scrollIntoView()clientWidth和clientHeightoffsetLeft和offsetTopoffsetWidth和offsetHeightscrollLeft和scrollTopclientX和clientY]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2017 新的开始]]></title>
      <url>%2F2017%2F01%2F08%2Fhello-2017%2F</url>
      <content type="text"><![CDATA[新的一年刚刚开始，一转眼就毕业好多年了，2016年似乎一眨眼的功夫就过去了。2016年认真开始转行，进度甚微，经历了从开始到放弃又重新开始，失望、沮丧、苦涩等各种心境，2016最终熬过去了。希望2017年能够有一个新的开始，能够真正的充实的过好每一天，day day up！ 博客今年入驻了github，新的一年搭建了自己的博客，以后要坚持每周一篇博客，记录自己遇到的问题和经历。坚持一些自己喜欢的事情，希望既能帮助自己也能帮助他人。 github去年底开始学习前端，于是注册了github，从刚开始的什么都不懂，到慢慢的能够写一些简单的代码，很开心。编程真的是很有趣，看到自己写的代码运行起来，展示在自己和他人面前，非常有成就感。新的一年要在github上面投入更多的时间和精力，向里面的大神学习，写自己的项目，点满每一天，为github社区贡献一些自己的东西。 新年计划 今年看到了一些有趣的书籍，余华、王小波等，2017年想看更多的书籍，定个小目标20本。 加强自己沟通的能力，解决问题的能力，每天坚持写代码。 坚持健身，争取把腹肌给练出来。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hello world]]></title>
      <url>%2F2017%2F01%2F07%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
